(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
function async(makeGenerator) {
  return function() {
    var $Promise = Promise;
    var generator = makeGenerator.apply(this, arguments);
    function handle(result) {
      if (result.done)
        return $Promise.resolve(result.value);
      return $Promise.resolve(result.value).then(function(res) {
        return handle(generator.next(res));
      }, function(err) {
        return handle(generator.throw(err));
      });
    }
    try {
      return handle(generator.next());
    } catch (ex) {
      return $Promise.reject(ex);
    }
  };
}
exports.async = async;


},{}],2:[function(require,module,exports){
"use strict";
var Helpers = function Helpers() {};
var $Helpers = Helpers;
($traceurRuntime.createClass)(Helpers, {
  wait: function() {
    var time = arguments[0] !== (void 0) ? arguments[0] : 500;
    return new Promise((function(resolve) {
      setTimeout(resolve, time);
    }));
  },
  log: function(msg) {
    var console = window.console;
    console.log(msg);
  }
}, {
  assignTo: function(object) {
    Object.assign(object, $Helpers.prototype);
  },
  create: function() {
    return new $Helpers();
  }
});
exports.Helpers = Helpers;


},{}],3:[function(require,module,exports){
"use strict";
var async = $traceurRuntime.assertObject(require('Nusait.Services.async')).async;
var Helpers = $traceurRuntime.assertObject(require('Nusait.Support.Helpers')).Helpers;
var $__8 = $traceurRuntime.assertObject(Helpers.prototype),
    log = $__8.log,
    wait = $__8.wait;
var console;
var $Promise;
var $window;
var Test = function Test(windowArg) {
  $window = windowArg;
  console = $window.console;
  $Promise = $window.Promise;
  log('Test being constructed');
};
($traceurRuntime.createClass)(Test, {
  speak: function() {
    var message = arguments[0] !== (void 0) ? arguments[0] : 'defaultmessage';
    log('speak method called');
    var up = (function(str) {
      return str.toUpperCase();
    });
    log(("My " + up('age') + " is " + this.age));
    this.anotherSpeak();
  },
  run: function() {
    this.speak('hey, what up?');
    this.restParameters('one', 'two', 'three');
    this.spread();
    this.forOf();
    this.destructuring();
    this.mapObj();
    this.shorthandMethods();
  },
  testAsync: function() {
    var test = async($traceurRuntime.initGeneratorFunction(function $__10() {
      var blah;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return wait(1000);
            case 2:
              blah = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              log("waited in between");
              $ctx.state = 10;
              break;
            case 10:
              $ctx.state = 6;
              return wait(2000);
            case 6:
              $ctx.maybeThrow();
              $ctx.state = 8;
              break;
            case 8:
              log("finally all done!");
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__10, this);
    }));
    test();
  },
  shorthandMethods: function() {
    log('test shorthandMethods');
    var obj = {
      firstMethod: function() {
        return 'hey';
      },
      secondMethod: function() {
        return 'hey2';
      }
    };
    log(obj.firstMethod());
    log(obj.secondMethod());
  },
  mapObj: function() {
    var map = new Map();
    var key,
        value;
    map.set(1, 'jik');
    log(map.has(1));
    map.set(2, 'nyi');
    log(map.get(1));
    log(map.size);
    log('#forOf on map');
    for (var $__1 = map[Symbol.iterator](),
        $__2; !($__2 = $__1.next()).done; ) {
      var $__8 = $traceurRuntime.assertObject($__2.value),
          k = $__8[0],
          v = $__8[1],
          l = $__8[2];
      {
        log(k + ' + ' + v);
      }
    }
    log('map#forEach()');
    map.forEach((function(value, key, list) {
      return log(value, key, list);
    }));
    log('map#values()');
    for (var $__3 = map.values()[Symbol.iterator](),
        $__4; !($__4 = $__3.next()).done; ) {
      value = $__4.value;
      {
        log(value);
      }
    }
    log('map#entries()');
    for (var $__5 = map.entries()[Symbol.iterator](),
        $__6; !($__6 = $__5.next()).done; ) {
      value = $__6.value;
      {
        log(value);
      }
    }
    map.delete(1);
    map.forEach((function(value, key, list) {
      return log(value, key, list);
    }));
    map.clear();
    map.forEach((function(value, key, list) {
      return log(value, key, list);
    }));
  },
  destructuring: function() {
    var $__8 = {
      age: 18,
      gender: 'female'
    },
        theirAge = $__8.age,
        gender = $__8.gender;
    log(theirAge);
    log(gender);
    var $__8 = [234.234, 643.234],
        lat = $__8[0],
        lng = $__8[1];
    log(lat);
    log(lng);
    var fnc = function($__8) {
      var $__9 = $traceurRuntime.assertObject($__8),
          lat = $__9.lat,
          lng = $__9.latitude;
      log('destructuring parameters:');
      log(lat);
      log(lng);
    };
    fnc({
      lat: 45,
      latitude: 25
    });
  },
  forOf: function() {
    log('forOf test:');
    var numbers = ['one', 'two', 'three'];
    for (var $__1 = numbers[Symbol.iterator](),
        $__2; !($__2 = $__1.next()).done; ) {
      var number = $__2.value;
      {
        log(number);
      }
    }
  },
  spread: function() {
    var parts = ['shoulder', 'knees'];
    var lyrics = $traceurRuntime.spread(['head'], parts, ['and', 'toes']);
    log(lyrics.join(' - '));
  },
  restParameters: function(argOne) {
    for (var args = [],
        $__7 = 1; $__7 < arguments.length; $__7++)
      args[$__7 - 1] = arguments[$__7];
    log(argOne);
    log(Array.isArray(args));
    log(("args.length = " + args.length));
  },
  anotherSpeak: function() {
    return anotherSpeak;
  },
  get age() {
    return 15;
  }
}, {hello: function() {
    log('helllo');
  }});
function anotherSpeak() {
  log(("anotherSpeak: age is " + this.age));
}
wait(1400).then((function() {
  return log('hey, I waited 1400');
}));
Helpers.assignTo(Test.prototype);
exports.Test = Test;


},{"Nusait.Services.async":1,"Nusait.Support.Helpers":2}],4:[function(require,module,exports){
var Test = require('Nusait.Utils.Test').Test;

var test = new Test(window);
test.run();
// test.testAsync();

window.Test = Test; 
window.test = test;

},{"Nusait.Utils.Test":3}]},{},[4])
//# sourceMappingURL=data:application/json;base64,
