(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
function async(makeGenerator) {
  return function() {
    var $Promise = Promise;
    var generator = makeGenerator.apply(this, arguments);
    function handle(result) {
      if (result.done)
        return $Promise.resolve(result.value);
      return $Promise.resolve(result.value).then(function(res) {
        return handle(generator.next(res));
      }, function(err) {
        return handle(generator.throw(err));
      });
    }
    try {
      return handle(generator.next());
    } catch (ex) {
      return $Promise.reject(ex);
    }
  };
}
exports.async = async;


},{}],2:[function(require,module,exports){
"use strict";
var async = $traceurRuntime.assertObject(require('Nusait.Services.async')).async;
var console;
var log;
var $Promise;
var $window;
var Test = function Test(windowArg) {
  $window = windowArg;
  console = $window.console;
  log = console.log.bind(console);
  $Promise = $window.Promise;
  log('Test being constructed');
};
($traceurRuntime.createClass)(Test, {
  speak: function() {
    log('speak method called');
    var up = (str) => str.toUpperCase();
    log(("My " + up('age') + " is " + this.age));
    this.anotherSpeak();
  },
  run: function() {
    this.speak('hey, what up?');
    this.restParameters('one', 'two', 'three');
    this.spread();
    this.forOf();
    this.destructuring();
    this.mapObj();
    this.shorthandMethods();
  },
  testAsync: function() {
    var test = async(function*() {
      var blah = yield wait(1000);
      log("waited in between");
      yield wait(2000);
      log("finally all done!");
    });
    test();
  },
  shorthandMethods: function() {
    log('test shorthandMethods');
    var obj = {
      firstMethod: function() {
        return 'hey';
      },
      secondMethod: function() {
        return 'hey2';
      }
    };
    log(obj.firstMethod());
    log(obj.secondMethod());
  },
  get wait() {
    return wait;
  },
  mapObj: function() {
    var map = new Map();
    var key,
        value;
    map.set(1, 'jik');
    log(map.has(1));
    map.set(2, 'nyi');
    log(map.get(1));
    log(map.size);
    log('#forOf on map');
    for (var $__2 of map) {
      var k = $__2[0],
          v = $__2[1],
          l = $__2[2];
      log(k + ' + ' + v);
    }
    log('map#forEach()');
    map.forEach((value, key, list) => log(value, key, list));
    log('map#values()');
    for (value of map.values()) {
      log(value);
    }
    log('map#entries()');
    for (value of map.entries()) {
      log(value);
    }
    map.delete(1);
    map.forEach((value, key, list) => log(value, key, list));
    map.clear();
    map.forEach((value, key, list) => log(value, key, list));
  },
  destructuring: function() {
    var $__2 = {
      age: 18,
      gender: 'female'
    },
        theirAge = $__2.age,
        gender = $__2.gender;
    log(theirAge);
    log(gender);
    var $__2 = [234.234, 643.234],
        lat = $__2[0],
        lng = $__2[1];
    log(lat);
    log(lng);
    var fnc = function($__2) {
      var $__3 = $traceurRuntime.assertObject($__2),
          lat = $__3.lat,
          lng = $__3.latitude;
      log('destructuring parameters:');
      log(lat);
      log(lng);
    };
    fnc({
      lat: 45,
      latitude: 25
    });
  },
  forOf: function() {
    log('forOf test:');
    var numbers = ['one', 'two', 'three'];
    for (var number of numbers) {
      log(number);
    }
  },
  spread: function() {
    var parts = ['shoulder', 'knees'];
    var lyrics = $traceurRuntime.spread(['head'], parts, ['and', 'toes']);
    log(lyrics.join(' - '));
  },
  restParameters: function(argOne) {
    for (var args = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      args[$__1 - 1] = arguments[$__1];
    log(argOne);
    log(Array.isArray(args));
    log(("args.length = " + args.length));
  },
  anotherSpeak: function() {
    return anotherSpeak;
  },
  get age() {
    return 15;
  }
}, {hello: function() {
    log('helllo');
  }});
function anotherSpeak() {
  log(("anotherSpeak: age is " + this.age));
}
function wait() {
  var time = arguments[0] !== (void 0) ? arguments[0] : 500;
  return new $Promise((resolve) => {
    log(("starting to wait " + time));
    setTimeout(() => {
      log(("just waited " + time + "."));
      resolve();
    }, time);
  });
}
exports.Test = Test;


},{"Nusait.Services.async":1}],3:[function(require,module,exports){
var Test = require('Nusait.Utils.Test').Test;

var test = new Test(window);
test.run();
// test.testAsync();

window.Test = Test; 
window.test = test;

},{"Nusait.Utils.Test":2}]},{},[3])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9OdXNhaXQvU2VydmljZXMvYXN5bmMuanMiLCJqcy9OdXNhaXQvVXRpbHMvVGVzdC5qcyIsImpzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNJQTtBQUFBLE9BQVMsTUFBSSxDQUFFLGFBQVksQ0FBRztBQUUxQixPQUFPLFVBQVMsQUFBQyxDQUFFO0FBQ2xCLEFBQUksTUFBQSxDQUFBLFFBQU8sRUFBSSxRQUFNLENBQUM7QUFDbkIsQUFBSSxNQUFBLENBQUEsU0FBUSxFQUFJLENBQUEsYUFBWSxNQUFNLEFBQUMsQ0FBQyxJQUFHLENBQUcsVUFBUSxDQUFDLENBQUM7QUFFcEQsV0FBUyxPQUFLLENBQUUsTUFBSyxDQUFHO0FBRXBCLFNBQUksTUFBSyxLQUFLO0FBQUcsYUFBTyxDQUFBLFFBQU8sUUFBUSxBQUFDLENBQUMsTUFBSyxNQUFNLENBQUMsQ0FBQztBQUFBLEFBRXRELFdBQU8sQ0FBQSxRQUFPLFFBQVEsQUFBQyxDQUFDLE1BQUssTUFBTSxDQUFDLEtBQUssQUFBQyxDQUFDLFNBQVUsR0FBRSxDQUFHO0FBQ3RELGFBQU8sQ0FBQSxNQUFLLEFBQUMsQ0FBQyxTQUFRLEtBQUssQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7TUFDdEMsQ0FBRyxVQUFVLEdBQUUsQ0FBRztBQUNkLGFBQU8sQ0FBQSxNQUFLLEFBQUMsQ0FBQyxTQUFRLE1BQU0sQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7TUFDdkMsQ0FBQyxDQUFDO0lBQ047QUFBQSxBQUVBLE1BQUk7QUFDQSxXQUFPLENBQUEsTUFBSyxBQUFDLENBQUMsU0FBUSxLQUFLLEFBQUMsRUFBQyxDQUFDLENBQUM7SUFDbkMsQ0FBRSxPQUFPLEVBQUMsQ0FBRztBQUNULFdBQU8sQ0FBQSxRQUFPLE9BQU8sQUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFD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LE9BQVMsYUFBVyxDQUFDLEFBQUMsQ0FBRTtBQUVwQixJQUFFLEFBQUMsRUFBQyx1QkFBdUIsRUFBQyxDQUFBLElBQUcsSUFBSSxFQUFHLENBQUM7QUFDM0M7QUFBQSxBQUNBLE9BQVMsS0FBRyxDQUFFLEFBQVMsQ0FBRztJQUFaLEtBQUcsNkNBQUksSUFBRTtBQUNuQixPQUFPLElBQUksU0FBTyxBQUFDLENBQUMsQ0FBQSxPQUFNLElBQUs7QUFDM0IsTUFBRSxBQUFDLEVBQUMsbUJBQW1CLEVBQUMsS0FBRyxFQUFHLENBQUM7QUFDL0IsYUFBUyxBQUFDLENBQUMsQ0FBQSxBQUFDLElBQUs7QUFDYixRQUFFLEFBQUMsRUFBQyxjQUFjLEVBQUMsS0FBRyxFQUFDLElBQUUsRUFBQyxDQUFDO0FBQzNCLFlBQU0sQUFBQyxFQUFDLENBQUM7SUFDYixDQUFHLEtBQUcsQ0FBQyxDQUFDO0VBQ1osQ0FBQyxDQUFDO0FBQ047QUFBQSxBQUVBLE1BQU0sS0FBSyxFQUFJLEtBQUcsQ0FBQztBQUFBOzs7QUMvTG5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKipcbkBtb2R1bGUgTnVzYWl0LlNlcnZpY2VzLmFzeW5jXG4qKi9cblxuZnVuY3Rpb24gYXN5bmMobWFrZUdlbmVyYXRvcikge1xuXHRcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIFx0dmFyICRQcm9taXNlID0gUHJvbWlzZTtcbiAgICAgICAgdmFyIGdlbmVyYXRvciA9IG1ha2VHZW5lcmF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGUocmVzdWx0KSB7XG4gICAgICAgICAgICAvLyByZXN1bHQgPT4geyBkb25lOiBbQm9vbGVhbl0sIHZhbHVlOiBbT2JqZWN0XSB9XG4gICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHJldHVybiAkUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC52YWx1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiAkUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC52YWx1ZSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShnZW5lcmF0b3IubmV4dChyZXMpKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGdlbmVyYXRvci50aHJvdyhlcnIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZ2VuZXJhdG9yLm5leHQoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gJFByb21pc2UucmVqZWN0KGV4KTtcbiAgICAgICAgfVxuICAgIH07ICBcbn1cblxuZXhwb3J0cy5hc3luYyA9IGFzeW5jOyIsIi8qKlxuQG1vZHVsZSBOdXNhaXQuU2VydmljZXMuVGVzdFxuKiovXG5cbnZhciB7YXN5bmN9ID0gcmVxdWlyZSgnTnVzYWl0LlNlcnZpY2VzLmFzeW5jJyk7XG5cbnZhciBjb25zb2xlO1xudmFyIGxvZztcbnZhciAkUHJvbWlzZTtcbnZhciAkd2luZG93O1xuXG5jbGFzcyBUZXN0IHtcbiAgICAvKipcbiAgICBAY2xhc3MgVGVzdFxuICAgIEBjb25zdHJ1Y3RvclxuICAgIEBwYXJhbSB7T2JqZWN0fSB3aW5kb3dBcmcgQW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgRE9NIHdpbmRvd1xuICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHdpbmRvd0FyZykge1xuICAgICAgICAkd2luZG93ID0gd2luZG93QXJnO1xuICAgICAgICBjb25zb2xlID0gJHdpbmRvdy5jb25zb2xlO1xuICAgICAgICBsb2cgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgICAgICAkUHJvbWlzZSA9ICR3aW5kb3cuUHJvbWlzZTtcbiAgICAgICAgbG9nKCdUZXN0IGJlaW5nIGNvbnN0cnVjdGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBtZXRob2Qgc3BlYWtcbiAgICBAcGFyYW0gbWVzc2FnZT0nZGVmYXVsdCBtZXNzYWdlJyB7U3RyaW5nfSBhIG1lc3NhZ2UgdG8gb3V0cHV0XG4gICAgKiovXG4gICAgc3BlYWsobWVzc2FnZSA9ICdkZWZhdWx0bWVzc2FnZScpIHtcbiAgICAgICAgbG9nKCdzcGVhayBtZXRob2QgY2FsbGVkJyk7XG4gICAgICAgIHZhciB1cCA9IHN0ciA9PiBzdHIudG9VcHBlckNhc2UoKTtcblxuICAgICAgICBsb2coYE15ICR7dXAoJ2FnZScpfSBpcyAke3RoaXMuYWdlfWApO1xuICAgICAgICB0aGlzLmFub3RoZXJTcGVhaygpO1xuICAgIH1cbiAgICAvKipcbiAgICBSdW5zIHRoZSBwcm9ncmFtXG5cbiAgICBUaGUgbWV0aG9kIHdpbGwgcnVuIHRoZSBlbnRpcmUgcHJvZ3JhbVxuXG4gICAgQG1ldGhvZCBydW5cbiAgICAqKi9cbiAgICBydW4oKSB7XG4gICAgICAgIHRoaXMuc3BlYWsoJ2hleSwgd2hhdCB1cD8nKTsgXG4gICAgICAgIHRoaXMucmVzdFBhcmFtZXRlcnMoJ29uZScsICd0d28nLCAndGhyZWUnKTtcbiAgICAgICAgdGhpcy5zcHJlYWQoKTtcbiAgICAgICAgdGhpcy5mb3JPZigpO1xuICAgICAgICB0aGlzLmRlc3RydWN0dXJpbmcoKTtcbiAgICAgICAgdGhpcy5tYXBPYmooKTtcbiAgICAgICAgdGhpcy5zaG9ydGhhbmRNZXRob2RzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgIHRlc3RBc3luY1xuXG4gICAgVGVzdHMgaG93IHdlbGwgZ2VuZXJhdG9ycyBhbmQgcHJvbWlzZXMgY2FuIGJlIGNvbWJpbmVkLlxuXG4gICAgQG1ldGhvZCB0ZXN0QXN5bmNcbiAgICAqKi9cbiAgICB0ZXN0QXN5bmMoKSB7XG4gICAgICAgIHZhciB0ZXN0ID0gYXN5bmMoIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgYmxhaCA9IHlpZWxkIHdhaXQoMTAwMCk7XG4gICAgICAgICAgICBsb2coYHdhaXRlZCBpbiBiZXR3ZWVuYCk7XG4gICAgICAgICAgICB5aWVsZCB3YWl0KDIwMDApO1xuICAgICAgICAgICAgbG9nKGBmaW5hbGx5IGFsbCBkb25lIWApO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCk7XG4gICAgfVxuICAgIHNob3J0aGFuZE1ldGhvZHMoKSB7XG4gICAgICAgIGxvZygndGVzdCBzaG9ydGhhbmRNZXRob2RzJyk7XG4gICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICBmaXJzdE1ldGhvZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hleSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2Vjb25kTWV0aG9kKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnaGV5Mic7XG4gICAgICAgICAgICB9LCAgXG4gICAgICAgIH07XG5cbiAgICAgICAgbG9nKG9iai5maXJzdE1ldGhvZCgpKTtcbiAgICAgICAgbG9nKG9iai5zZWNvbmRNZXRob2QoKSk7XG4gICAgfVxuICAgIGdldCB3YWl0KCkge1xuXG4gICAgICAgIHJldHVybiB3YWl0O1xuICAgIH1cbiAgICBtYXBPYmooKSB7XG4gICAgICAgIC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9cbiAgICAgICAgLy8gZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwXG4gICAgICAgIFxuICAgICAgICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIga2V5LCB2YWx1ZTtcblxuICAgICAgICBtYXAuc2V0KDEsICdqaWsnKTtcbiAgICAgICAgbG9nKG1hcC5oYXMoMSkpO1xuICAgICAgICBtYXAuc2V0KDIsICdueWknKTtcbiAgICAgICAgbG9nKG1hcC5nZXQoMSkpO1xuICAgICAgICBsb2cobWFwLnNpemUpO1xuXG4gICAgICAgIGxvZygnI2Zvck9mIG9uIG1hcCcpO1xuICAgICAgICBmb3IgKHZhciBbaywgdiwgbF0gb2YgbWFwKSB7XG4gICAgICAgICAgbG9nKGsgKyAnICsgJyArIHYpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nKCdtYXAjZm9yRWFjaCgpJyk7XG4gICAgICAgIG1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5LCBsaXN0KSA9PiBsb2codmFsdWUsIGtleSwgbGlzdCkpO1xuXG4gICAgICAgIGxvZygnbWFwI3ZhbHVlcygpJyk7XG4gICAgICAgIGZvcih2YWx1ZSBvZiBtYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGxvZyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2coJ21hcCNlbnRyaWVzKCknKTtcbiAgICAgICAgZm9yKHZhbHVlIG9mIG1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGxvZyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXAuZGVsZXRlKDEpO1xuICAgICAgICBtYXAuZm9yRWFjaCgodmFsdWUsIGtleSwgbGlzdCkgPT4gbG9nKHZhbHVlLCBrZXksIGxpc3QpKTtcbiAgICAgICAgbWFwLmNsZWFyKCk7XG4gICAgICAgIG1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5LCBsaXN0KSA9PiBsb2codmFsdWUsIGtleSwgbGlzdCkpO1xuICAgIH1cbiAgICBkZXN0cnVjdHVyaW5nKCkge1xuICAgICAgICB2YXIge2FnZTogdGhlaXJBZ2UsIGdlbmRlcn0gPSB7XG4gICAgICAgICAgICBhZ2U6IDE4LFxuICAgICAgICAgICAgZ2VuZGVyOiAnZmVtYWxlJyxcbiAgICAgICAgfTtcbiAgICAgICAgbG9nKHRoZWlyQWdlKTtcbiAgICAgICAgbG9nKGdlbmRlcik7XG5cbiAgICAgICAgdmFyIFtsYXQsIGxuZ10gPSBbMjM0LjIzNCwgNjQzLjIzNF07XG4gICAgICAgIGxvZyhsYXQpO1xuICAgICAgICBsb2cobG5nKTtcblxuICAgICAgICB2YXIgZm5jID0gZnVuY3Rpb24oe2xhdCwgbGF0aXR1ZGU6bG5nfSkge1xuICAgICAgICAgICAgbG9nKCdkZXN0cnVjdHVyaW5nIHBhcmFtZXRlcnM6Jyk7XG4gICAgICAgICAgICBsb2cobGF0KTtcbiAgICAgICAgICAgIGxvZyhsbmcpO1xuICAgICAgICB9O1xuICAgICAgICBmbmMoe2xhdDogNDUsIGxhdGl0dWRlOiAyNX0pO1xuICAgIH1cbiAgICBmb3JPZigpIHtcbiAgICAgICAgbG9nKCdmb3JPZiB0ZXN0OicpO1xuICAgICAgICB2YXIgbnVtYmVycyA9IFsnb25lJywndHdvJywndGhyZWUnXTtcbiAgICAgICAgZm9yICh2YXIgbnVtYmVyIG9mIG51bWJlcnMpIHtcbiAgICAgICAgICAgIGxvZyhudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNwcmVhZCgpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gWydzaG91bGRlcicsICdrbmVlcyddO1xuICAgICAgICB2YXIgbHlyaWNzID0gWydoZWFkJywgLi4ucGFydHMsICdhbmQnLCAndG9lcyddO1xuICAgICAgICBsb2cobHlyaWNzLmpvaW4oJyAtICcpKTtcbiAgICB9XG4gICAgcmVzdFBhcmFtZXRlcnMoYXJnT25lLCAuLi5hcmdzKSB7XG4gICAgICAgIGxvZyhhcmdPbmUpO1xuICAgICAgICBsb2coQXJyYXkuaXNBcnJheShhcmdzKSk7XG4gICAgICAgIGxvZyhgYXJncy5sZW5ndGggPSAke2FyZ3MubGVuZ3RofWApO1xuICAgIH1cbiAgICBhbm90aGVyU3BlYWsoKSB7XG4gICAgICAgIHJldHVybiBhbm90aGVyU3BlYWs7XG4gICAgfVxuICAgIGdldCBhZ2UoKSB7XG4gICAgICAgIHJldHVybiAxNTtcbiAgICB9XG4gICAgLyoqXG4gICAgaGVsbG9cblxuICAgIFByaW50cyBvdXQgJ2hlbGxvJyB0byB0aGUgY29uc29sZVxuXG4gICAgQG1ldGhvZCBoZWxsb1xuICAgIEBzdGF0aWNcbiAgICAqKi9cbiAgICBzdGF0aWMgaGVsbG8oKSB7XG4gIFxuICAgICAgICBsb2coJ2hlbGxsbycpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFub3RoZXJTcGVhaygpIHtcblxuICAgIGxvZyhgYW5vdGhlclNwZWFrOiBhZ2UgaXMgJHt0aGlzLmFnZX1gKTtcbn1cbmZ1bmN0aW9uIHdhaXQodGltZSA9IDUwMCkge1xuICAgIHJldHVybiBuZXcgJFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGxvZyhgc3RhcnRpbmcgdG8gd2FpdCAke3RpbWV9YCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgbG9nKGBqdXN0IHdhaXRlZCAke3RpbWV9LmApO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aW1lKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0cy5UZXN0ID0gVGVzdDsiLCJ2YXIgVGVzdCA9IHJlcXVpcmUoJ051c2FpdC5VdGlscy5UZXN0JykuVGVzdDtcblxudmFyIHRlc3QgPSBuZXcgVGVzdCh3aW5kb3cpO1xudGVzdC5ydW4oKTtcbi8vIHRlc3QudGVzdEFzeW5jKCk7XG5cbndpbmRvdy5UZXN0ID0gVGVzdDsgXG53aW5kb3cudGVzdCA9IHRlc3Q7XG4iXX0=
